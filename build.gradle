plugins {
    id 'java'
    id 'maven-publish'
}

def dateString = getDate()
group 'com.fitreb.dev'

assert JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_17) : "Java 17 or newer is required"

//version dateString
version dateString + '-SNAPSHOT'
def jarNameHead = rootProject.name + "-" + version

repositories {
    mavenCentral()
}

publishing {

    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/fedex81/m68k"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }

    publications {
        gpr(MavenPublication) {
            from components.java
            groupId = project.group
            artifactId = project.name
            version = project.version
        }
    }
}

sourceSets {
    main {
        resources {
            srcDirs= ["res"]
        }
    }
}

dependencies {
    implementation 'org.tinylog:tinylog-api:2.7.0'

    implementation 'org.tinylog:tinylog-impl:2.7.0'
    implementation 'org.tinylog:slf4j-tinylog:2.7.0'

    testImplementation("org.junit.jupiter:junit-jupiter:5.13.4")
    testImplementation("org.junit.platform:junit-platform-launcher")
    testImplementation 'com.google.code.gson:gson:2.13.0'
}

test {
    useJUnitPlatform()
}

def static getDate() {
    String date = new Date().format('yyMMdd')
    date.substring(0,2) + "." + date.substring(2)
}

//create a single Jar with all dependencies
task fatJar(type: Jar) {
    dependsOn "compileJava"
    manifest {
        attributes 'Implementation-Title': 'headford68k',
                'Implementation-Version': archiveVersion
    }
    duplicatesStrategy= "exclude"
    getArchiveBaseName().set(project.name + "-all")//+ version
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from {
        ["README.md", "LICENSE.md"]
    }
    with jar
    doLast {
        println("Creating fatJar: "+ getArchiveFileName().getOrNull() +" in folder: " + destinationDirectory.getOrNull())
    }
}

task copyRes {
    copy {
        from {
            ["README.md", "LICENSE.md"]
        }
        into "$buildDir/packageDir"
    }
}

jar {
    dependsOn "copyRes"
    manifest {
        attributes 'Implementation-Title': rootProject.name,
                'Implementation-Version': archiveVersion,
                'Class-Path': configurations.compileClasspath.collect { "lib/" + it.getName() }.join(' ')
    }
    archivesBaseName = rootProject.name
    destinationDirectory = file("$buildDir/packageDir")
    into 'res', {
        from 'res'
    }
    doLast {
        println("Creating jar: " + getArchiveFileName().getOrNull() + " in folder: " + getDestinationDirectory().getOrNull())
    }
}

task jarWithSources(type: Jar) {
    dependsOn "test"
    duplicatesStrategy("exclude")
    from sourceSets.main.allSource
    manifest {
        attributes 'Implementation-Title': rootProject.name,
                'Implementation-Version': archiveVersion,
                'Class-Path': configurations.compileClasspath.collect { "lib/" + it.getName() }.join(' ')
    }
    getArchiveFileName().set(rootProject.name + "-binsrc-${project.version}.jar")
    destinationDirectory = file("$buildDir/dist")
    from {
        ["README.md", "LICENSE.md"]
    }
    with jar
    doLast {
        println("Creating jar with sources: " + getArchiveFileName().getOrNull() +
                " in folder: " + getDestinationDirectory().getOrNull())
    }
}

test {
    testLogging {
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
}
